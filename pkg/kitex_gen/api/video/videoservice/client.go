// Code generated by Kitex v0.10.1. DO NOT EDIT.

package videoservice

import (
	"context"

	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/client/callopt/streamcall"
	"github.com/cloudwego/kitex/client/streamclient"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	transport "github.com/cloudwego/kitex/transport"

	video "github.com/mutezebra/tiktok/pkg/kitex_gen/api/video"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	PublishVideo(ctx context.Context, req *video.PublishVideoReq, callOptions ...callopt.Option) (r *video.PublishVideoResp, err error)
	GetVideoList(ctx context.Context, req *video.GetVideoListReq, callOptions ...callopt.Option) (r *video.GetVideoListResp, err error)
	GetVideoPopular(ctx context.Context, req *video.GetVideoPopularReq, callOptions ...callopt.Option) (r *video.GetVideoPopularResp, err error)
	SearchVideo(ctx context.Context, req *video.SearchVideoReq, callOptions ...callopt.Option) (r *video.SearchVideoResp, err error)
}

// StreamClient is designed to provide Interface for Streaming APIs.
type StreamClient interface {
	VideoFeed(ctx context.Context, req *video.VideoFeedReq, callOptions ...streamcall.Option) (stream VideoService_VideoFeedClient, err error)
}

type VideoService_VideoFeedClient interface {
	streaming.Stream
	Recv() (*video.VideoFeedResp, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) PublishVideo(ctx context.Context, req *video.PublishVideoReq, callOptions ...callopt.Option) (r *video.PublishVideoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishVideo(ctx, req)
}

func (p *kVideoServiceClient) GetVideoList(ctx context.Context, req *video.GetVideoListReq, callOptions ...callopt.Option) (r *video.GetVideoListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoList(ctx, req)
}

func (p *kVideoServiceClient) GetVideoPopular(ctx context.Context, req *video.GetVideoPopularReq, callOptions ...callopt.Option) (r *video.GetVideoPopularResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoPopular(ctx, req)
}

func (p *kVideoServiceClient) SearchVideo(ctx context.Context, req *video.SearchVideoReq, callOptions ...callopt.Option) (r *video.SearchVideoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchVideo(ctx, req)
}

// NewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
func NewStreamClient(destService string, opts ...streamclient.Option) (StreamClient, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))
	options = append(options, client.WithTransportProtocol(transport.GRPC))
	options = append(options, streamclient.GetClientOptions(opts)...)

	kc, err := client.NewClient(serviceInfoForStreamClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceStreamClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
// It panics if any error occurs.
func MustNewStreamClient(destService string, opts ...streamclient.Option) StreamClient {
	kc, err := NewStreamClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceStreamClient struct {
	*kClient
}

func (p *kVideoServiceStreamClient) VideoFeed(ctx context.Context, req *video.VideoFeedReq, callOptions ...streamcall.Option) (stream VideoService_VideoFeedClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.VideoFeed(ctx, req)
}
