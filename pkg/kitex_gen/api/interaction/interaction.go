// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package interaction

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/mutezebra/tiktok/pkg/kitex_gen/api/video"
	"strings"
)

type CommentInfo struct {
	ID       *string `thrift:"ID,1,optional" frugal:"1,optional,string" json:"id,omitempry"`
	UID      *string `thrift:"UID,2,optional" frugal:"2,optional,string" json:"uid,omitempry"`
	VID      *string `thrift:"VID,3,optional" frugal:"3,optional,string" json:"vid,omitempry"`
	RootID   *string `thrift:"RootID,4,optional" frugal:"4,optional,string" json:"root_id,omitempry"`
	ReplyID  *string `thrift:"ReplyID,5,optional" frugal:"5,optional,string" json:"reply_id,omitempry"`
	Content  *string `thrift:"Content,6,optional" frugal:"6,optional,string" json:"content,omitempry"`
	Likes    *int32  `thrift:"Likes,7,optional" frugal:"7,optional,i32" json:"likes,omitempry"`
	CreateAt *string `thrift:"CreateAt,8,optional" frugal:"8,optional,string" json:"create_id,omitempry"`
}

func NewCommentInfo() *CommentInfo {
	return &CommentInfo{}
}

func (p *CommentInfo) InitDefault() {
}

var CommentInfo_ID_DEFAULT string

func (p *CommentInfo) GetID() (v string) {
	if !p.IsSetID() {
		return CommentInfo_ID_DEFAULT
	}
	return *p.ID
}

var CommentInfo_UID_DEFAULT string

func (p *CommentInfo) GetUID() (v string) {
	if !p.IsSetUID() {
		return CommentInfo_UID_DEFAULT
	}
	return *p.UID
}

var CommentInfo_VID_DEFAULT string

func (p *CommentInfo) GetVID() (v string) {
	if !p.IsSetVID() {
		return CommentInfo_VID_DEFAULT
	}
	return *p.VID
}

var CommentInfo_RootID_DEFAULT string

func (p *CommentInfo) GetRootID() (v string) {
	if !p.IsSetRootID() {
		return CommentInfo_RootID_DEFAULT
	}
	return *p.RootID
}

var CommentInfo_ReplyID_DEFAULT string

func (p *CommentInfo) GetReplyID() (v string) {
	if !p.IsSetReplyID() {
		return CommentInfo_ReplyID_DEFAULT
	}
	return *p.ReplyID
}

var CommentInfo_Content_DEFAULT string

func (p *CommentInfo) GetContent() (v string) {
	if !p.IsSetContent() {
		return CommentInfo_Content_DEFAULT
	}
	return *p.Content
}

var CommentInfo_Likes_DEFAULT int32

func (p *CommentInfo) GetLikes() (v int32) {
	if !p.IsSetLikes() {
		return CommentInfo_Likes_DEFAULT
	}
	return *p.Likes
}

var CommentInfo_CreateAt_DEFAULT string

func (p *CommentInfo) GetCreateAt() (v string) {
	if !p.IsSetCreateAt() {
		return CommentInfo_CreateAt_DEFAULT
	}
	return *p.CreateAt
}
func (p *CommentInfo) SetID(val *string) {
	p.ID = val
}
func (p *CommentInfo) SetUID(val *string) {
	p.UID = val
}
func (p *CommentInfo) SetVID(val *string) {
	p.VID = val
}
func (p *CommentInfo) SetRootID(val *string) {
	p.RootID = val
}
func (p *CommentInfo) SetReplyID(val *string) {
	p.ReplyID = val
}
func (p *CommentInfo) SetContent(val *string) {
	p.Content = val
}
func (p *CommentInfo) SetLikes(val *int32) {
	p.Likes = val
}
func (p *CommentInfo) SetCreateAt(val *string) {
	p.CreateAt = val
}

var fieldIDToName_CommentInfo = map[int16]string{
	1: "ID",
	2: "UID",
	3: "VID",
	4: "RootID",
	5: "ReplyID",
	6: "Content",
	7: "Likes",
	8: "CreateAt",
}

func (p *CommentInfo) IsSetID() bool {
	return p.ID != nil
}

func (p *CommentInfo) IsSetUID() bool {
	return p.UID != nil
}

func (p *CommentInfo) IsSetVID() bool {
	return p.VID != nil
}

func (p *CommentInfo) IsSetRootID() bool {
	return p.RootID != nil
}

func (p *CommentInfo) IsSetReplyID() bool {
	return p.ReplyID != nil
}

func (p *CommentInfo) IsSetContent() bool {
	return p.Content != nil
}

func (p *CommentInfo) IsSetLikes() bool {
	return p.Likes != nil
}

func (p *CommentInfo) IsSetCreateAt() bool {
	return p.CreateAt != nil
}

func (p *CommentInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommentInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommentInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *CommentInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UID = _field
	return nil
}
func (p *CommentInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VID = _field
	return nil
}
func (p *CommentInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RootID = _field
	return nil
}
func (p *CommentInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReplyID = _field
	return nil
}
func (p *CommentInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Content = _field
	return nil
}
func (p *CommentInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Likes = _field
	return nil
}
func (p *CommentInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreateAt = _field
	return nil
}

func (p *CommentInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommentInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommentInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("ID", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommentInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUID() {
		if err = oprot.WriteFieldBegin("UID", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CommentInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVID() {
		if err = oprot.WriteFieldBegin("VID", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.VID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CommentInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRootID() {
		if err = oprot.WriteFieldBegin("RootID", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RootID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CommentInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplyID() {
		if err = oprot.WriteFieldBegin("ReplyID", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ReplyID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CommentInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("Content", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CommentInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLikes() {
		if err = oprot.WriteFieldBegin("Likes", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Likes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CommentInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateAt() {
		if err = oprot.WriteFieldBegin("CreateAt", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CreateAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CommentInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentInfo(%+v)", *p)

}

func (p *CommentInfo) DeepEqual(ano *CommentInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.UID) {
		return false
	}
	if !p.Field3DeepEqual(ano.VID) {
		return false
	}
	if !p.Field4DeepEqual(ano.RootID) {
		return false
	}
	if !p.Field5DeepEqual(ano.ReplyID) {
		return false
	}
	if !p.Field6DeepEqual(ano.Content) {
		return false
	}
	if !p.Field7DeepEqual(ano.Likes) {
		return false
	}
	if !p.Field8DeepEqual(ano.CreateAt) {
		return false
	}
	return true
}

func (p *CommentInfo) Field1DeepEqual(src *string) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ID, *src) != 0 {
		return false
	}
	return true
}
func (p *CommentInfo) Field2DeepEqual(src *string) bool {

	if p.UID == src {
		return true
	} else if p.UID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UID, *src) != 0 {
		return false
	}
	return true
}
func (p *CommentInfo) Field3DeepEqual(src *string) bool {

	if p.VID == src {
		return true
	} else if p.VID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.VID, *src) != 0 {
		return false
	}
	return true
}
func (p *CommentInfo) Field4DeepEqual(src *string) bool {

	if p.RootID == src {
		return true
	} else if p.RootID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RootID, *src) != 0 {
		return false
	}
	return true
}
func (p *CommentInfo) Field5DeepEqual(src *string) bool {

	if p.ReplyID == src {
		return true
	} else if p.ReplyID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ReplyID, *src) != 0 {
		return false
	}
	return true
}
func (p *CommentInfo) Field6DeepEqual(src *string) bool {

	if p.Content == src {
		return true
	} else if p.Content == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Content, *src) != 0 {
		return false
	}
	return true
}
func (p *CommentInfo) Field7DeepEqual(src *int32) bool {

	if p.Likes == src {
		return true
	} else if p.Likes == nil || src == nil {
		return false
	}
	if *p.Likes != *src {
		return false
	}
	return true
}
func (p *CommentInfo) Field8DeepEqual(src *string) bool {

	if p.CreateAt == src {
		return true
	} else if p.CreateAt == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CreateAt, *src) != 0 {
		return false
	}
	return true
}

type LikeReq struct {
	VideoID    *int64 `thrift:"VideoID,1,optional" frugal:"1,optional,i64" form:"video_id"`
	CommentID  *int64 `thrift:"CommentID,2,optional" frugal:"2,optional,i64" form:"comment_id"`
	UID        *int64 `thrift:"UID,3,optional" frugal:"3,optional,i64" json:"UID,omitempty"`
	ActionType *int8  `thrift:"ActionType,4,optional" frugal:"4,optional,i8" form:"action_type,required"`
}

func NewLikeReq() *LikeReq {
	return &LikeReq{}
}

func (p *LikeReq) InitDefault() {
}

var LikeReq_VideoID_DEFAULT int64

func (p *LikeReq) GetVideoID() (v int64) {
	if !p.IsSetVideoID() {
		return LikeReq_VideoID_DEFAULT
	}
	return *p.VideoID
}

var LikeReq_CommentID_DEFAULT int64

func (p *LikeReq) GetCommentID() (v int64) {
	if !p.IsSetCommentID() {
		return LikeReq_CommentID_DEFAULT
	}
	return *p.CommentID
}

var LikeReq_UID_DEFAULT int64

func (p *LikeReq) GetUID() (v int64) {
	if !p.IsSetUID() {
		return LikeReq_UID_DEFAULT
	}
	return *p.UID
}

var LikeReq_ActionType_DEFAULT int8

func (p *LikeReq) GetActionType() (v int8) {
	if !p.IsSetActionType() {
		return LikeReq_ActionType_DEFAULT
	}
	return *p.ActionType
}
func (p *LikeReq) SetVideoID(val *int64) {
	p.VideoID = val
}
func (p *LikeReq) SetCommentID(val *int64) {
	p.CommentID = val
}
func (p *LikeReq) SetUID(val *int64) {
	p.UID = val
}
func (p *LikeReq) SetActionType(val *int8) {
	p.ActionType = val
}

var fieldIDToName_LikeReq = map[int16]string{
	1: "VideoID",
	2: "CommentID",
	3: "UID",
	4: "ActionType",
}

func (p *LikeReq) IsSetVideoID() bool {
	return p.VideoID != nil
}

func (p *LikeReq) IsSetCommentID() bool {
	return p.CommentID != nil
}

func (p *LikeReq) IsSetUID() bool {
	return p.UID != nil
}

func (p *LikeReq) IsSetActionType() bool {
	return p.ActionType != nil
}

func (p *LikeReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VideoID = _field
	return nil
}
func (p *LikeReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommentID = _field
	return nil
}
func (p *LikeReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UID = _field
	return nil
}
func (p *LikeReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ActionType = _field
	return nil
}

func (p *LikeReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LikeReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideoID() {
		if err = oprot.WriteFieldBegin("VideoID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VideoID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommentID() {
		if err = oprot.WriteFieldBegin("CommentID", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CommentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LikeReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUID() {
		if err = oprot.WriteFieldBegin("UID", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LikeReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetActionType() {
		if err = oprot.WriteFieldBegin("ActionType", thrift.BYTE, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.ActionType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *LikeReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeReq(%+v)", *p)

}

func (p *LikeReq) DeepEqual(ano *LikeReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CommentID) {
		return false
	}
	if !p.Field3DeepEqual(ano.UID) {
		return false
	}
	if !p.Field4DeepEqual(ano.ActionType) {
		return false
	}
	return true
}

func (p *LikeReq) Field1DeepEqual(src *int64) bool {

	if p.VideoID == src {
		return true
	} else if p.VideoID == nil || src == nil {
		return false
	}
	if *p.VideoID != *src {
		return false
	}
	return true
}
func (p *LikeReq) Field2DeepEqual(src *int64) bool {

	if p.CommentID == src {
		return true
	} else if p.CommentID == nil || src == nil {
		return false
	}
	if *p.CommentID != *src {
		return false
	}
	return true
}
func (p *LikeReq) Field3DeepEqual(src *int64) bool {

	if p.UID == src {
		return true
	} else if p.UID == nil || src == nil {
		return false
	}
	if *p.UID != *src {
		return false
	}
	return true
}
func (p *LikeReq) Field4DeepEqual(src *int8) bool {

	if p.ActionType == src {
		return true
	} else if p.ActionType == nil || src == nil {
		return false
	}
	if *p.ActionType != *src {
		return false
	}
	return true
}

type LikeResp struct {
}

func NewLikeResp() *LikeResp {
	return &LikeResp{}
}

func (p *LikeResp) InitDefault() {
}

var fieldIDToName_LikeResp = map[int16]string{}

func (p *LikeResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("LikeResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeResp(%+v)", *p)

}

func (p *LikeResp) DeepEqual(ano *LikeResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type DislikeReq struct {
	VideoID    *int64 `thrift:"VideoID,1,optional" frugal:"1,optional,i64" form:"video_id"`
	CommentID  *int64 `thrift:"CommentID,2,optional" frugal:"2,optional,i64" form:"comment_id"`
	UID        *int64 `thrift:"UID,3,optional" frugal:"3,optional,i64" json:"UID,omitempty"`
	ActionType *int8  `thrift:"ActionType,4,optional" frugal:"4,optional,i8" form:"action_type,required"`
}

func NewDislikeReq() *DislikeReq {
	return &DislikeReq{}
}

func (p *DislikeReq) InitDefault() {
}

var DislikeReq_VideoID_DEFAULT int64

func (p *DislikeReq) GetVideoID() (v int64) {
	if !p.IsSetVideoID() {
		return DislikeReq_VideoID_DEFAULT
	}
	return *p.VideoID
}

var DislikeReq_CommentID_DEFAULT int64

func (p *DislikeReq) GetCommentID() (v int64) {
	if !p.IsSetCommentID() {
		return DislikeReq_CommentID_DEFAULT
	}
	return *p.CommentID
}

var DislikeReq_UID_DEFAULT int64

func (p *DislikeReq) GetUID() (v int64) {
	if !p.IsSetUID() {
		return DislikeReq_UID_DEFAULT
	}
	return *p.UID
}

var DislikeReq_ActionType_DEFAULT int8

func (p *DislikeReq) GetActionType() (v int8) {
	if !p.IsSetActionType() {
		return DislikeReq_ActionType_DEFAULT
	}
	return *p.ActionType
}
func (p *DislikeReq) SetVideoID(val *int64) {
	p.VideoID = val
}
func (p *DislikeReq) SetCommentID(val *int64) {
	p.CommentID = val
}
func (p *DislikeReq) SetUID(val *int64) {
	p.UID = val
}
func (p *DislikeReq) SetActionType(val *int8) {
	p.ActionType = val
}

var fieldIDToName_DislikeReq = map[int16]string{
	1: "VideoID",
	2: "CommentID",
	3: "UID",
	4: "ActionType",
}

func (p *DislikeReq) IsSetVideoID() bool {
	return p.VideoID != nil
}

func (p *DislikeReq) IsSetCommentID() bool {
	return p.CommentID != nil
}

func (p *DislikeReq) IsSetUID() bool {
	return p.UID != nil
}

func (p *DislikeReq) IsSetActionType() bool {
	return p.ActionType != nil
}

func (p *DislikeReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DislikeReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DislikeReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VideoID = _field
	return nil
}
func (p *DislikeReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommentID = _field
	return nil
}
func (p *DislikeReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UID = _field
	return nil
}
func (p *DislikeReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ActionType = _field
	return nil
}

func (p *DislikeReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DislikeReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DislikeReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideoID() {
		if err = oprot.WriteFieldBegin("VideoID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VideoID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DislikeReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommentID() {
		if err = oprot.WriteFieldBegin("CommentID", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CommentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DislikeReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUID() {
		if err = oprot.WriteFieldBegin("UID", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DislikeReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetActionType() {
		if err = oprot.WriteFieldBegin("ActionType", thrift.BYTE, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.ActionType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *DislikeReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DislikeReq(%+v)", *p)

}

func (p *DislikeReq) DeepEqual(ano *DislikeReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CommentID) {
		return false
	}
	if !p.Field3DeepEqual(ano.UID) {
		return false
	}
	if !p.Field4DeepEqual(ano.ActionType) {
		return false
	}
	return true
}

func (p *DislikeReq) Field1DeepEqual(src *int64) bool {

	if p.VideoID == src {
		return true
	} else if p.VideoID == nil || src == nil {
		return false
	}
	if *p.VideoID != *src {
		return false
	}
	return true
}
func (p *DislikeReq) Field2DeepEqual(src *int64) bool {

	if p.CommentID == src {
		return true
	} else if p.CommentID == nil || src == nil {
		return false
	}
	if *p.CommentID != *src {
		return false
	}
	return true
}
func (p *DislikeReq) Field3DeepEqual(src *int64) bool {

	if p.UID == src {
		return true
	} else if p.UID == nil || src == nil {
		return false
	}
	if *p.UID != *src {
		return false
	}
	return true
}
func (p *DislikeReq) Field4DeepEqual(src *int8) bool {

	if p.ActionType == src {
		return true
	} else if p.ActionType == nil || src == nil {
		return false
	}
	if *p.ActionType != *src {
		return false
	}
	return true
}

type DislikeResp struct {
}

func NewDislikeResp() *DislikeResp {
	return &DislikeResp{}
}

func (p *DislikeResp) InitDefault() {
}

var fieldIDToName_DislikeResp = map[int16]string{}

func (p *DislikeResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DislikeResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DislikeResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DislikeResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DislikeResp(%+v)", *p)

}

func (p *DislikeResp) DeepEqual(ano *DislikeResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type LikeListReq struct {
	UID      *int64 `thrift:"UID,1,optional" frugal:"1,optional,i64" json:"UID,omitempty"`
	PageSize *int8  `thrift:"PageSize,2,optional" frugal:"2,optional,i8" form:"page_size,required"`
	PageNum  *int8  `thrift:"PageNum,3,optional" frugal:"3,optional,i8" form:"page_num,required"`
}

func NewLikeListReq() *LikeListReq {
	return &LikeListReq{}
}

func (p *LikeListReq) InitDefault() {
}

var LikeListReq_UID_DEFAULT int64

func (p *LikeListReq) GetUID() (v int64) {
	if !p.IsSetUID() {
		return LikeListReq_UID_DEFAULT
	}
	return *p.UID
}

var LikeListReq_PageSize_DEFAULT int8

func (p *LikeListReq) GetPageSize() (v int8) {
	if !p.IsSetPageSize() {
		return LikeListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var LikeListReq_PageNum_DEFAULT int8

func (p *LikeListReq) GetPageNum() (v int8) {
	if !p.IsSetPageNum() {
		return LikeListReq_PageNum_DEFAULT
	}
	return *p.PageNum
}
func (p *LikeListReq) SetUID(val *int64) {
	p.UID = val
}
func (p *LikeListReq) SetPageSize(val *int8) {
	p.PageSize = val
}
func (p *LikeListReq) SetPageNum(val *int8) {
	p.PageNum = val
}

var fieldIDToName_LikeListReq = map[int16]string{
	1: "UID",
	2: "PageSize",
	3: "PageNum",
}

func (p *LikeListReq) IsSetUID() bool {
	return p.UID != nil
}

func (p *LikeListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *LikeListReq) IsSetPageNum() bool {
	return p.PageNum != nil
}

func (p *LikeListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UID = _field
	return nil
}
func (p *LikeListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *LikeListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNum = _field
	return nil
}

func (p *LikeListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LikeListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUID() {
		if err = oprot.WriteFieldBegin("UID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("PageSize", thrift.BYTE, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LikeListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNum() {
		if err = oprot.WriteFieldBegin("PageNum", thrift.BYTE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.PageNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LikeListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeListReq(%+v)", *p)

}

func (p *LikeListReq) DeepEqual(ano *LikeListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UID) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageNum) {
		return false
	}
	return true
}

func (p *LikeListReq) Field1DeepEqual(src *int64) bool {

	if p.UID == src {
		return true
	} else if p.UID == nil || src == nil {
		return false
	}
	if *p.UID != *src {
		return false
	}
	return true
}
func (p *LikeListReq) Field2DeepEqual(src *int8) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *LikeListReq) Field3DeepEqual(src *int8) bool {

	if p.PageNum == src {
		return true
	} else if p.PageNum == nil || src == nil {
		return false
	}
	if *p.PageNum != *src {
		return false
	}
	return true
}

type LikeListResp struct {
	Count *int32             `thrift:"Count,1,optional" frugal:"1,optional,i32" json:"count,omitempty"`
	Items []*video.VideoInfo `thrift:"items,2,optional" frugal:"2,optional,list<video.VideoInfo>" json:"items,omitempty"`
}

func NewLikeListResp() *LikeListResp {
	return &LikeListResp{}
}

func (p *LikeListResp) InitDefault() {
}

var LikeListResp_Count_DEFAULT int32

func (p *LikeListResp) GetCount() (v int32) {
	if !p.IsSetCount() {
		return LikeListResp_Count_DEFAULT
	}
	return *p.Count
}

var LikeListResp_Items_DEFAULT []*video.VideoInfo

func (p *LikeListResp) GetItems() (v []*video.VideoInfo) {
	if !p.IsSetItems() {
		return LikeListResp_Items_DEFAULT
	}
	return p.Items
}
func (p *LikeListResp) SetCount(val *int32) {
	p.Count = val
}
func (p *LikeListResp) SetItems(val []*video.VideoInfo) {
	p.Items = val
}

var fieldIDToName_LikeListResp = map[int16]string{
	1: "Count",
	2: "items",
}

func (p *LikeListResp) IsSetCount() bool {
	return p.Count != nil
}

func (p *LikeListResp) IsSetItems() bool {
	return p.Items != nil
}

func (p *LikeListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeListResp) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Count = _field
	return nil
}
func (p *LikeListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*video.VideoInfo, 0, size)
	values := make([]video.VideoInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}

func (p *LikeListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LikeListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCount() {
		if err = oprot.WriteFieldBegin("Count", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Count); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LikeListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeListResp(%+v)", *p)

}

func (p *LikeListResp) DeepEqual(ano *LikeListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Count) {
		return false
	}
	if !p.Field2DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *LikeListResp) Field1DeepEqual(src *int32) bool {

	if p.Count == src {
		return true
	} else if p.Count == nil || src == nil {
		return false
	}
	if *p.Count != *src {
		return false
	}
	return true
}
func (p *LikeListResp) Field2DeepEqual(src []*video.VideoInfo) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CommentReq struct {
	VideoID   *int64  `thrift:"VideoID,1,optional" frugal:"1,optional,i64" form:"video_id,required"`
	CommentID *int64  `thrift:"CommentID,2,optional" frugal:"2,optional,i64" form:"comment_id"`
	UID       *int64  `thrift:"UID,3,optional" frugal:"3,optional,i64" json:"UID,omitempty"`
	Content   *string `thrift:"content,4,optional" frugal:"4,optional,string" form:"content,required"`
}

func NewCommentReq() *CommentReq {
	return &CommentReq{}
}

func (p *CommentReq) InitDefault() {
}

var CommentReq_VideoID_DEFAULT int64

func (p *CommentReq) GetVideoID() (v int64) {
	if !p.IsSetVideoID() {
		return CommentReq_VideoID_DEFAULT
	}
	return *p.VideoID
}

var CommentReq_CommentID_DEFAULT int64

func (p *CommentReq) GetCommentID() (v int64) {
	if !p.IsSetCommentID() {
		return CommentReq_CommentID_DEFAULT
	}
	return *p.CommentID
}

var CommentReq_UID_DEFAULT int64

func (p *CommentReq) GetUID() (v int64) {
	if !p.IsSetUID() {
		return CommentReq_UID_DEFAULT
	}
	return *p.UID
}

var CommentReq_Content_DEFAULT string

func (p *CommentReq) GetContent() (v string) {
	if !p.IsSetContent() {
		return CommentReq_Content_DEFAULT
	}
	return *p.Content
}
func (p *CommentReq) SetVideoID(val *int64) {
	p.VideoID = val
}
func (p *CommentReq) SetCommentID(val *int64) {
	p.CommentID = val
}
func (p *CommentReq) SetUID(val *int64) {
	p.UID = val
}
func (p *CommentReq) SetContent(val *string) {
	p.Content = val
}

var fieldIDToName_CommentReq = map[int16]string{
	1: "VideoID",
	2: "CommentID",
	3: "UID",
	4: "content",
}

func (p *CommentReq) IsSetVideoID() bool {
	return p.VideoID != nil
}

func (p *CommentReq) IsSetCommentID() bool {
	return p.CommentID != nil
}

func (p *CommentReq) IsSetUID() bool {
	return p.UID != nil
}

func (p *CommentReq) IsSetContent() bool {
	return p.Content != nil
}

func (p *CommentReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommentReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommentReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VideoID = _field
	return nil
}
func (p *CommentReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommentID = _field
	return nil
}
func (p *CommentReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UID = _field
	return nil
}
func (p *CommentReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Content = _field
	return nil
}

func (p *CommentReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommentReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommentReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideoID() {
		if err = oprot.WriteFieldBegin("VideoID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VideoID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommentReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommentID() {
		if err = oprot.WriteFieldBegin("CommentID", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CommentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CommentReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUID() {
		if err = oprot.WriteFieldBegin("UID", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CommentReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CommentReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentReq(%+v)", *p)

}

func (p *CommentReq) DeepEqual(ano *CommentReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CommentID) {
		return false
	}
	if !p.Field3DeepEqual(ano.UID) {
		return false
	}
	if !p.Field4DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *CommentReq) Field1DeepEqual(src *int64) bool {

	if p.VideoID == src {
		return true
	} else if p.VideoID == nil || src == nil {
		return false
	}
	if *p.VideoID != *src {
		return false
	}
	return true
}
func (p *CommentReq) Field2DeepEqual(src *int64) bool {

	if p.CommentID == src {
		return true
	} else if p.CommentID == nil || src == nil {
		return false
	}
	if *p.CommentID != *src {
		return false
	}
	return true
}
func (p *CommentReq) Field3DeepEqual(src *int64) bool {

	if p.UID == src {
		return true
	} else if p.UID == nil || src == nil {
		return false
	}
	if *p.UID != *src {
		return false
	}
	return true
}
func (p *CommentReq) Field4DeepEqual(src *string) bool {

	if p.Content == src {
		return true
	} else if p.Content == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Content, *src) != 0 {
		return false
	}
	return true
}

type CommentResp struct {
}

func NewCommentResp() *CommentResp {
	return &CommentResp{}
}

func (p *CommentResp) InitDefault() {
}

var fieldIDToName_CommentResp = map[int16]string{}

func (p *CommentResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommentResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("CommentResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommentResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentResp(%+v)", *p)

}

func (p *CommentResp) DeepEqual(ano *CommentResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type CommentListReq struct {
	VideoID   *int64 `thrift:"VideoID,1,optional" frugal:"1,optional,i64" form:"video_id"`
	CommentID *int64 `thrift:"CommentID,2,optional" frugal:"2,optional,i64" form:"comment_id"`
	PageSize  *int8  `thrift:"PageSize,3,optional" frugal:"3,optional,i8" form:"page_size,required"`
	PageNum   *int8  `thrift:"PageNum,4,optional" frugal:"4,optional,i8" form:"page_num,required"`
}

func NewCommentListReq() *CommentListReq {
	return &CommentListReq{}
}

func (p *CommentListReq) InitDefault() {
}

var CommentListReq_VideoID_DEFAULT int64

func (p *CommentListReq) GetVideoID() (v int64) {
	if !p.IsSetVideoID() {
		return CommentListReq_VideoID_DEFAULT
	}
	return *p.VideoID
}

var CommentListReq_CommentID_DEFAULT int64

func (p *CommentListReq) GetCommentID() (v int64) {
	if !p.IsSetCommentID() {
		return CommentListReq_CommentID_DEFAULT
	}
	return *p.CommentID
}

var CommentListReq_PageSize_DEFAULT int8

func (p *CommentListReq) GetPageSize() (v int8) {
	if !p.IsSetPageSize() {
		return CommentListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var CommentListReq_PageNum_DEFAULT int8

func (p *CommentListReq) GetPageNum() (v int8) {
	if !p.IsSetPageNum() {
		return CommentListReq_PageNum_DEFAULT
	}
	return *p.PageNum
}
func (p *CommentListReq) SetVideoID(val *int64) {
	p.VideoID = val
}
func (p *CommentListReq) SetCommentID(val *int64) {
	p.CommentID = val
}
func (p *CommentListReq) SetPageSize(val *int8) {
	p.PageSize = val
}
func (p *CommentListReq) SetPageNum(val *int8) {
	p.PageNum = val
}

var fieldIDToName_CommentListReq = map[int16]string{
	1: "VideoID",
	2: "CommentID",
	3: "PageSize",
	4: "PageNum",
}

func (p *CommentListReq) IsSetVideoID() bool {
	return p.VideoID != nil
}

func (p *CommentListReq) IsSetCommentID() bool {
	return p.CommentID != nil
}

func (p *CommentListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *CommentListReq) IsSetPageNum() bool {
	return p.PageNum != nil
}

func (p *CommentListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommentListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommentListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VideoID = _field
	return nil
}
func (p *CommentListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommentID = _field
	return nil
}
func (p *CommentListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *CommentListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNum = _field
	return nil
}

func (p *CommentListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommentListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommentListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideoID() {
		if err = oprot.WriteFieldBegin("VideoID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VideoID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommentListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommentID() {
		if err = oprot.WriteFieldBegin("CommentID", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CommentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CommentListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("PageSize", thrift.BYTE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CommentListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNum() {
		if err = oprot.WriteFieldBegin("PageNum", thrift.BYTE, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.PageNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CommentListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentListReq(%+v)", *p)

}

func (p *CommentListReq) DeepEqual(ano *CommentListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CommentID) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field4DeepEqual(ano.PageNum) {
		return false
	}
	return true
}

func (p *CommentListReq) Field1DeepEqual(src *int64) bool {

	if p.VideoID == src {
		return true
	} else if p.VideoID == nil || src == nil {
		return false
	}
	if *p.VideoID != *src {
		return false
	}
	return true
}
func (p *CommentListReq) Field2DeepEqual(src *int64) bool {

	if p.CommentID == src {
		return true
	} else if p.CommentID == nil || src == nil {
		return false
	}
	if *p.CommentID != *src {
		return false
	}
	return true
}
func (p *CommentListReq) Field3DeepEqual(src *int8) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *CommentListReq) Field4DeepEqual(src *int8) bool {

	if p.PageNum == src {
		return true
	} else if p.PageNum == nil || src == nil {
		return false
	}
	if *p.PageNum != *src {
		return false
	}
	return true
}

type CommentListResp struct {
	Count *int32         `thrift:"Count,1,optional" frugal:"1,optional,i32" json:"count,omitempry"`
	Items []*CommentInfo `thrift:"Items,2,optional" frugal:"2,optional,list<CommentInfo>" json:"items,omitempry"`
}

func NewCommentListResp() *CommentListResp {
	return &CommentListResp{}
}

func (p *CommentListResp) InitDefault() {
}

var CommentListResp_Count_DEFAULT int32

func (p *CommentListResp) GetCount() (v int32) {
	if !p.IsSetCount() {
		return CommentListResp_Count_DEFAULT
	}
	return *p.Count
}

var CommentListResp_Items_DEFAULT []*CommentInfo

func (p *CommentListResp) GetItems() (v []*CommentInfo) {
	if !p.IsSetItems() {
		return CommentListResp_Items_DEFAULT
	}
	return p.Items
}
func (p *CommentListResp) SetCount(val *int32) {
	p.Count = val
}
func (p *CommentListResp) SetItems(val []*CommentInfo) {
	p.Items = val
}

var fieldIDToName_CommentListResp = map[int16]string{
	1: "Count",
	2: "Items",
}

func (p *CommentListResp) IsSetCount() bool {
	return p.Count != nil
}

func (p *CommentListResp) IsSetItems() bool {
	return p.Items != nil
}

func (p *CommentListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommentListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommentListResp) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Count = _field
	return nil
}
func (p *CommentListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*CommentInfo, 0, size)
	values := make([]CommentInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}

func (p *CommentListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommentListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommentListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCount() {
		if err = oprot.WriteFieldBegin("Count", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Count); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommentListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("Items", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CommentListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentListResp(%+v)", *p)

}

func (p *CommentListResp) DeepEqual(ano *CommentListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Count) {
		return false
	}
	if !p.Field2DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *CommentListResp) Field1DeepEqual(src *int32) bool {

	if p.Count == src {
		return true
	} else if p.Count == nil || src == nil {
		return false
	}
	if *p.Count != *src {
		return false
	}
	return true
}
func (p *CommentListResp) Field2DeepEqual(src []*CommentInfo) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type DeleteCommentReq struct {
	UID       *int64 `thrift:"UID,1,optional" frugal:"1,optional,i64" json:"UID,omitempty"`
	CommentID *int64 `thrift:"CommentID,2,optional" frugal:"2,optional,i64" form:"comment_id,required"`
}

func NewDeleteCommentReq() *DeleteCommentReq {
	return &DeleteCommentReq{}
}

func (p *DeleteCommentReq) InitDefault() {
}

var DeleteCommentReq_UID_DEFAULT int64

func (p *DeleteCommentReq) GetUID() (v int64) {
	if !p.IsSetUID() {
		return DeleteCommentReq_UID_DEFAULT
	}
	return *p.UID
}

var DeleteCommentReq_CommentID_DEFAULT int64

func (p *DeleteCommentReq) GetCommentID() (v int64) {
	if !p.IsSetCommentID() {
		return DeleteCommentReq_CommentID_DEFAULT
	}
	return *p.CommentID
}
func (p *DeleteCommentReq) SetUID(val *int64) {
	p.UID = val
}
func (p *DeleteCommentReq) SetCommentID(val *int64) {
	p.CommentID = val
}

var fieldIDToName_DeleteCommentReq = map[int16]string{
	1: "UID",
	2: "CommentID",
}

func (p *DeleteCommentReq) IsSetUID() bool {
	return p.UID != nil
}

func (p *DeleteCommentReq) IsSetCommentID() bool {
	return p.CommentID != nil
}

func (p *DeleteCommentReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteCommentReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteCommentReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UID = _field
	return nil
}
func (p *DeleteCommentReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommentID = _field
	return nil
}

func (p *DeleteCommentReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCommentReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteCommentReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUID() {
		if err = oprot.WriteFieldBegin("UID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteCommentReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommentID() {
		if err = oprot.WriteFieldBegin("CommentID", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CommentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteCommentReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCommentReq(%+v)", *p)

}

func (p *DeleteCommentReq) DeepEqual(ano *DeleteCommentReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CommentID) {
		return false
	}
	return true
}

func (p *DeleteCommentReq) Field1DeepEqual(src *int64) bool {

	if p.UID == src {
		return true
	} else if p.UID == nil || src == nil {
		return false
	}
	if *p.UID != *src {
		return false
	}
	return true
}
func (p *DeleteCommentReq) Field2DeepEqual(src *int64) bool {

	if p.CommentID == src {
		return true
	} else if p.CommentID == nil || src == nil {
		return false
	}
	if *p.CommentID != *src {
		return false
	}
	return true
}

type DeleteCommentResp struct {
	UID       *int64 `thrift:"UID,1,optional" frugal:"1,optional,i64" json:"UID,omitempty"`
	CommentID *int64 `thrift:"CommentID,2,optional" frugal:"2,optional,i64" form:"comment_id,required"`
}

func NewDeleteCommentResp() *DeleteCommentResp {
	return &DeleteCommentResp{}
}

func (p *DeleteCommentResp) InitDefault() {
}

var DeleteCommentResp_UID_DEFAULT int64

func (p *DeleteCommentResp) GetUID() (v int64) {
	if !p.IsSetUID() {
		return DeleteCommentResp_UID_DEFAULT
	}
	return *p.UID
}

var DeleteCommentResp_CommentID_DEFAULT int64

func (p *DeleteCommentResp) GetCommentID() (v int64) {
	if !p.IsSetCommentID() {
		return DeleteCommentResp_CommentID_DEFAULT
	}
	return *p.CommentID
}
func (p *DeleteCommentResp) SetUID(val *int64) {
	p.UID = val
}
func (p *DeleteCommentResp) SetCommentID(val *int64) {
	p.CommentID = val
}

var fieldIDToName_DeleteCommentResp = map[int16]string{
	1: "UID",
	2: "CommentID",
}

func (p *DeleteCommentResp) IsSetUID() bool {
	return p.UID != nil
}

func (p *DeleteCommentResp) IsSetCommentID() bool {
	return p.CommentID != nil
}

func (p *DeleteCommentResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteCommentResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteCommentResp) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UID = _field
	return nil
}
func (p *DeleteCommentResp) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommentID = _field
	return nil
}

func (p *DeleteCommentResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCommentResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteCommentResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUID() {
		if err = oprot.WriteFieldBegin("UID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteCommentResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommentID() {
		if err = oprot.WriteFieldBegin("CommentID", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CommentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteCommentResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCommentResp(%+v)", *p)

}

func (p *DeleteCommentResp) DeepEqual(ano *DeleteCommentResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CommentID) {
		return false
	}
	return true
}

func (p *DeleteCommentResp) Field1DeepEqual(src *int64) bool {

	if p.UID == src {
		return true
	} else if p.UID == nil || src == nil {
		return false
	}
	if *p.UID != *src {
		return false
	}
	return true
}
func (p *DeleteCommentResp) Field2DeepEqual(src *int64) bool {

	if p.CommentID == src {
		return true
	} else if p.CommentID == nil || src == nil {
		return false
	}
	if *p.CommentID != *src {
		return false
	}
	return true
}

type InteractionService interface {
	Like(ctx context.Context, req *LikeReq) (r *LikeResp, err error)

	Dislike(ctx context.Context, req *DislikeReq) (r *DislikeResp, err error)

	LikeList(ctx context.Context, req *LikeListReq) (r *LikeListResp, err error)

	Comment(ctx context.Context, req *CommentReq) (r *CommentResp, err error)

	CommentList(ctx context.Context, req *CommentListReq) (r *CommentListResp, err error)

	DeleteComment(ctx context.Context, req *DeleteCommentReq) (r *DeleteCommentResp, err error)
}

type InteractionServiceLikeArgs struct {
	Req *LikeReq `thrift:"req,1" frugal:"1,default,LikeReq" json:"req"`
}

func NewInteractionServiceLikeArgs() *InteractionServiceLikeArgs {
	return &InteractionServiceLikeArgs{}
}

func (p *InteractionServiceLikeArgs) InitDefault() {
}

var InteractionServiceLikeArgs_Req_DEFAULT *LikeReq

func (p *InteractionServiceLikeArgs) GetReq() (v *LikeReq) {
	if !p.IsSetReq() {
		return InteractionServiceLikeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceLikeArgs) SetReq(val *LikeReq) {
	p.Req = val
}

var fieldIDToName_InteractionServiceLikeArgs = map[int16]string{
	1: "req",
}

func (p *InteractionServiceLikeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceLikeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractionServiceLikeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractionServiceLikeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewLikeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *InteractionServiceLikeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Like_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractionServiceLikeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InteractionServiceLikeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeArgs(%+v)", *p)

}

func (p *InteractionServiceLikeArgs) DeepEqual(ano *InteractionServiceLikeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *InteractionServiceLikeArgs) Field1DeepEqual(src *LikeReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type InteractionServiceLikeResult struct {
	Success *LikeResp `thrift:"success,0,optional" frugal:"0,optional,LikeResp" json:"success,omitempty"`
}

func NewInteractionServiceLikeResult() *InteractionServiceLikeResult {
	return &InteractionServiceLikeResult{}
}

func (p *InteractionServiceLikeResult) InitDefault() {
}

var InteractionServiceLikeResult_Success_DEFAULT *LikeResp

func (p *InteractionServiceLikeResult) GetSuccess() (v *LikeResp) {
	if !p.IsSetSuccess() {
		return InteractionServiceLikeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceLikeResult) SetSuccess(x interface{}) {
	p.Success = x.(*LikeResp)
}

var fieldIDToName_InteractionServiceLikeResult = map[int16]string{
	0: "success",
}

func (p *InteractionServiceLikeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceLikeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractionServiceLikeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractionServiceLikeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewLikeResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *InteractionServiceLikeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Like_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractionServiceLikeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *InteractionServiceLikeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeResult(%+v)", *p)

}

func (p *InteractionServiceLikeResult) DeepEqual(ano *InteractionServiceLikeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InteractionServiceLikeResult) Field0DeepEqual(src *LikeResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type InteractionServiceDislikeArgs struct {
	Req *DislikeReq `thrift:"req,1" frugal:"1,default,DislikeReq" json:"req"`
}

func NewInteractionServiceDislikeArgs() *InteractionServiceDislikeArgs {
	return &InteractionServiceDislikeArgs{}
}

func (p *InteractionServiceDislikeArgs) InitDefault() {
}

var InteractionServiceDislikeArgs_Req_DEFAULT *DislikeReq

func (p *InteractionServiceDislikeArgs) GetReq() (v *DislikeReq) {
	if !p.IsSetReq() {
		return InteractionServiceDislikeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceDislikeArgs) SetReq(val *DislikeReq) {
	p.Req = val
}

var fieldIDToName_InteractionServiceDislikeArgs = map[int16]string{
	1: "req",
}

func (p *InteractionServiceDislikeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceDislikeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractionServiceDislikeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractionServiceDislikeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDislikeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *InteractionServiceDislikeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Dislike_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractionServiceDislikeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InteractionServiceDislikeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceDislikeArgs(%+v)", *p)

}

func (p *InteractionServiceDislikeArgs) DeepEqual(ano *InteractionServiceDislikeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *InteractionServiceDislikeArgs) Field1DeepEqual(src *DislikeReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type InteractionServiceDislikeResult struct {
	Success *DislikeResp `thrift:"success,0,optional" frugal:"0,optional,DislikeResp" json:"success,omitempty"`
}

func NewInteractionServiceDislikeResult() *InteractionServiceDislikeResult {
	return &InteractionServiceDislikeResult{}
}

func (p *InteractionServiceDislikeResult) InitDefault() {
}

var InteractionServiceDislikeResult_Success_DEFAULT *DislikeResp

func (p *InteractionServiceDislikeResult) GetSuccess() (v *DislikeResp) {
	if !p.IsSetSuccess() {
		return InteractionServiceDislikeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceDislikeResult) SetSuccess(x interface{}) {
	p.Success = x.(*DislikeResp)
}

var fieldIDToName_InteractionServiceDislikeResult = map[int16]string{
	0: "success",
}

func (p *InteractionServiceDislikeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceDislikeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractionServiceDislikeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractionServiceDislikeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDislikeResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *InteractionServiceDislikeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Dislike_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractionServiceDislikeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *InteractionServiceDislikeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceDislikeResult(%+v)", *p)

}

func (p *InteractionServiceDislikeResult) DeepEqual(ano *InteractionServiceDislikeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InteractionServiceDislikeResult) Field0DeepEqual(src *DislikeResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type InteractionServiceLikeListArgs struct {
	Req *LikeListReq `thrift:"req,1" frugal:"1,default,LikeListReq" json:"req"`
}

func NewInteractionServiceLikeListArgs() *InteractionServiceLikeListArgs {
	return &InteractionServiceLikeListArgs{}
}

func (p *InteractionServiceLikeListArgs) InitDefault() {
}

var InteractionServiceLikeListArgs_Req_DEFAULT *LikeListReq

func (p *InteractionServiceLikeListArgs) GetReq() (v *LikeListReq) {
	if !p.IsSetReq() {
		return InteractionServiceLikeListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceLikeListArgs) SetReq(val *LikeListReq) {
	p.Req = val
}

var fieldIDToName_InteractionServiceLikeListArgs = map[int16]string{
	1: "req",
}

func (p *InteractionServiceLikeListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceLikeListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractionServiceLikeListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractionServiceLikeListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewLikeListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *InteractionServiceLikeListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LikeList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractionServiceLikeListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InteractionServiceLikeListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeListArgs(%+v)", *p)

}

func (p *InteractionServiceLikeListArgs) DeepEqual(ano *InteractionServiceLikeListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *InteractionServiceLikeListArgs) Field1DeepEqual(src *LikeListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type InteractionServiceLikeListResult struct {
	Success *LikeListResp `thrift:"success,0,optional" frugal:"0,optional,LikeListResp" json:"success,omitempty"`
}

func NewInteractionServiceLikeListResult() *InteractionServiceLikeListResult {
	return &InteractionServiceLikeListResult{}
}

func (p *InteractionServiceLikeListResult) InitDefault() {
}

var InteractionServiceLikeListResult_Success_DEFAULT *LikeListResp

func (p *InteractionServiceLikeListResult) GetSuccess() (v *LikeListResp) {
	if !p.IsSetSuccess() {
		return InteractionServiceLikeListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceLikeListResult) SetSuccess(x interface{}) {
	p.Success = x.(*LikeListResp)
}

var fieldIDToName_InteractionServiceLikeListResult = map[int16]string{
	0: "success",
}

func (p *InteractionServiceLikeListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceLikeListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractionServiceLikeListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractionServiceLikeListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewLikeListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *InteractionServiceLikeListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LikeList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractionServiceLikeListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *InteractionServiceLikeListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeListResult(%+v)", *p)

}

func (p *InteractionServiceLikeListResult) DeepEqual(ano *InteractionServiceLikeListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InteractionServiceLikeListResult) Field0DeepEqual(src *LikeListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type InteractionServiceCommentArgs struct {
	Req *CommentReq `thrift:"req,1" frugal:"1,default,CommentReq" json:"req"`
}

func NewInteractionServiceCommentArgs() *InteractionServiceCommentArgs {
	return &InteractionServiceCommentArgs{}
}

func (p *InteractionServiceCommentArgs) InitDefault() {
}

var InteractionServiceCommentArgs_Req_DEFAULT *CommentReq

func (p *InteractionServiceCommentArgs) GetReq() (v *CommentReq) {
	if !p.IsSetReq() {
		return InteractionServiceCommentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceCommentArgs) SetReq(val *CommentReq) {
	p.Req = val
}

var fieldIDToName_InteractionServiceCommentArgs = map[int16]string{
	1: "req",
}

func (p *InteractionServiceCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceCommentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractionServiceCommentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractionServiceCommentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCommentReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *InteractionServiceCommentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Comment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractionServiceCommentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InteractionServiceCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCommentArgs(%+v)", *p)

}

func (p *InteractionServiceCommentArgs) DeepEqual(ano *InteractionServiceCommentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *InteractionServiceCommentArgs) Field1DeepEqual(src *CommentReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type InteractionServiceCommentResult struct {
	Success *CommentResp `thrift:"success,0,optional" frugal:"0,optional,CommentResp" json:"success,omitempty"`
}

func NewInteractionServiceCommentResult() *InteractionServiceCommentResult {
	return &InteractionServiceCommentResult{}
}

func (p *InteractionServiceCommentResult) InitDefault() {
}

var InteractionServiceCommentResult_Success_DEFAULT *CommentResp

func (p *InteractionServiceCommentResult) GetSuccess() (v *CommentResp) {
	if !p.IsSetSuccess() {
		return InteractionServiceCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*CommentResp)
}

var fieldIDToName_InteractionServiceCommentResult = map[int16]string{
	0: "success",
}

func (p *InteractionServiceCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceCommentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractionServiceCommentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractionServiceCommentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCommentResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *InteractionServiceCommentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Comment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractionServiceCommentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *InteractionServiceCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCommentResult(%+v)", *p)

}

func (p *InteractionServiceCommentResult) DeepEqual(ano *InteractionServiceCommentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InteractionServiceCommentResult) Field0DeepEqual(src *CommentResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type InteractionServiceCommentListArgs struct {
	Req *CommentListReq `thrift:"req,1" frugal:"1,default,CommentListReq" json:"req"`
}

func NewInteractionServiceCommentListArgs() *InteractionServiceCommentListArgs {
	return &InteractionServiceCommentListArgs{}
}

func (p *InteractionServiceCommentListArgs) InitDefault() {
}

var InteractionServiceCommentListArgs_Req_DEFAULT *CommentListReq

func (p *InteractionServiceCommentListArgs) GetReq() (v *CommentListReq) {
	if !p.IsSetReq() {
		return InteractionServiceCommentListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceCommentListArgs) SetReq(val *CommentListReq) {
	p.Req = val
}

var fieldIDToName_InteractionServiceCommentListArgs = map[int16]string{
	1: "req",
}

func (p *InteractionServiceCommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceCommentListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractionServiceCommentListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractionServiceCommentListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCommentListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *InteractionServiceCommentListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommentList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractionServiceCommentListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InteractionServiceCommentListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCommentListArgs(%+v)", *p)

}

func (p *InteractionServiceCommentListArgs) DeepEqual(ano *InteractionServiceCommentListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *InteractionServiceCommentListArgs) Field1DeepEqual(src *CommentListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type InteractionServiceCommentListResult struct {
	Success *CommentListResp `thrift:"success,0,optional" frugal:"0,optional,CommentListResp" json:"success,omitempty"`
}

func NewInteractionServiceCommentListResult() *InteractionServiceCommentListResult {
	return &InteractionServiceCommentListResult{}
}

func (p *InteractionServiceCommentListResult) InitDefault() {
}

var InteractionServiceCommentListResult_Success_DEFAULT *CommentListResp

func (p *InteractionServiceCommentListResult) GetSuccess() (v *CommentListResp) {
	if !p.IsSetSuccess() {
		return InteractionServiceCommentListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceCommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*CommentListResp)
}

var fieldIDToName_InteractionServiceCommentListResult = map[int16]string{
	0: "success",
}

func (p *InteractionServiceCommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceCommentListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractionServiceCommentListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractionServiceCommentListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCommentListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *InteractionServiceCommentListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommentList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractionServiceCommentListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *InteractionServiceCommentListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCommentListResult(%+v)", *p)

}

func (p *InteractionServiceCommentListResult) DeepEqual(ano *InteractionServiceCommentListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InteractionServiceCommentListResult) Field0DeepEqual(src *CommentListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type InteractionServiceDeleteCommentArgs struct {
	Req *DeleteCommentReq `thrift:"req,1" frugal:"1,default,DeleteCommentReq" json:"req"`
}

func NewInteractionServiceDeleteCommentArgs() *InteractionServiceDeleteCommentArgs {
	return &InteractionServiceDeleteCommentArgs{}
}

func (p *InteractionServiceDeleteCommentArgs) InitDefault() {
}

var InteractionServiceDeleteCommentArgs_Req_DEFAULT *DeleteCommentReq

func (p *InteractionServiceDeleteCommentArgs) GetReq() (v *DeleteCommentReq) {
	if !p.IsSetReq() {
		return InteractionServiceDeleteCommentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceDeleteCommentArgs) SetReq(val *DeleteCommentReq) {
	p.Req = val
}

var fieldIDToName_InteractionServiceDeleteCommentArgs = map[int16]string{
	1: "req",
}

func (p *InteractionServiceDeleteCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceDeleteCommentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractionServiceDeleteCommentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractionServiceDeleteCommentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteCommentReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *InteractionServiceDeleteCommentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteComment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractionServiceDeleteCommentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InteractionServiceDeleteCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceDeleteCommentArgs(%+v)", *p)

}

func (p *InteractionServiceDeleteCommentArgs) DeepEqual(ano *InteractionServiceDeleteCommentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *InteractionServiceDeleteCommentArgs) Field1DeepEqual(src *DeleteCommentReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type InteractionServiceDeleteCommentResult struct {
	Success *DeleteCommentResp `thrift:"success,0,optional" frugal:"0,optional,DeleteCommentResp" json:"success,omitempty"`
}

func NewInteractionServiceDeleteCommentResult() *InteractionServiceDeleteCommentResult {
	return &InteractionServiceDeleteCommentResult{}
}

func (p *InteractionServiceDeleteCommentResult) InitDefault() {
}

var InteractionServiceDeleteCommentResult_Success_DEFAULT *DeleteCommentResp

func (p *InteractionServiceDeleteCommentResult) GetSuccess() (v *DeleteCommentResp) {
	if !p.IsSetSuccess() {
		return InteractionServiceDeleteCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceDeleteCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteCommentResp)
}

var fieldIDToName_InteractionServiceDeleteCommentResult = map[int16]string{
	0: "success",
}

func (p *InteractionServiceDeleteCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceDeleteCommentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractionServiceDeleteCommentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractionServiceDeleteCommentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteCommentResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *InteractionServiceDeleteCommentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteComment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractionServiceDeleteCommentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *InteractionServiceDeleteCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceDeleteCommentResult(%+v)", *p)

}

func (p *InteractionServiceDeleteCommentResult) DeepEqual(ano *InteractionServiceDeleteCommentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InteractionServiceDeleteCommentResult) Field0DeepEqual(src *DeleteCommentResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
