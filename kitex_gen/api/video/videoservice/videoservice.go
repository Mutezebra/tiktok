// Code generated by Kitex v0.9.1. DO NOT EDIT.

package videoservice

import (
	"context"
	"errors"
	"fmt"

	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"

	video "github.com/Mutezebra/tiktok/kitex_gen/api/video"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"VideoFeed": kitex.NewMethodInfo(
		videoFeedHandler,
		newVideoServiceVideoFeedArgs,
		newVideoServiceVideoFeedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
	"PublishVideo": kitex.NewMethodInfo(
		publishVideoHandler,
		newVideoServicePublishVideoArgs,
		newVideoServicePublishVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVideoList": kitex.NewMethodInfo(
		getVideoListHandler,
		newVideoServiceGetVideoListArgs,
		newVideoServiceGetVideoListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVideoPopular": kitex.NewMethodInfo(
		getVideoPopularHandler,
		newVideoServiceGetVideoPopularArgs,
		newVideoServiceGetVideoPopularResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SearchVideo": kitex.NewMethodInfo(
		searchVideoHandler,
		newVideoServiceSearchVideoArgs,
		newVideoServiceSearchVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	videoServiceServiceInfo                = NewServiceInfo()
	videoServiceServiceInfoForClient       = NewServiceInfoForClient()
	videoServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func videoFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("VideoService.VideoFeed is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &videoServiceVideoFeedServer{st.Stream}
	req := new(video.VideoFeedReq)
	if err := st.Stream.RecvMsg(req); err != nil {
		return err
	}
	return handler.(video.VideoService).VideoFeed(req, stream)
}

type videoServiceVideoFeedClient struct {
	streaming.Stream
}

func (x *videoServiceVideoFeedClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *videoServiceVideoFeedClient) Recv() (*video.VideoFeedResp, error) {
	m := new(video.VideoFeedResp)
	return m, x.Stream.RecvMsg(m)
}

type videoServiceVideoFeedServer struct {
	streaming.Stream
}

func (x *videoServiceVideoFeedServer) Send(m *video.VideoFeedResp) error {
	return x.Stream.SendMsg(m)
}

func newVideoServiceVideoFeedArgs() interface{} {
	return video.NewVideoServiceVideoFeedArgs()
}

func newVideoServiceVideoFeedResult() interface{} {
	return video.NewVideoServiceVideoFeedResult()
}

func publishVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishVideoArgs)
	realResult := result.(*video.VideoServicePublishVideoResult)
	success, err := handler.(video.VideoService).PublishVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishVideoArgs() interface{} {
	return video.NewVideoServicePublishVideoArgs()
}

func newVideoServicePublishVideoResult() interface{} {
	return video.NewVideoServicePublishVideoResult()
}

func getVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetVideoListArgs)
	realResult := result.(*video.VideoServiceGetVideoListResult)
	success, err := handler.(video.VideoService).GetVideoList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideoListArgs() interface{} {
	return video.NewVideoServiceGetVideoListArgs()
}

func newVideoServiceGetVideoListResult() interface{} {
	return video.NewVideoServiceGetVideoListResult()
}

func getVideoPopularHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetVideoPopularArgs)
	realResult := result.(*video.VideoServiceGetVideoPopularResult)
	success, err := handler.(video.VideoService).GetVideoPopular(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideoPopularArgs() interface{} {
	return video.NewVideoServiceGetVideoPopularArgs()
}

func newVideoServiceGetVideoPopularResult() interface{} {
	return video.NewVideoServiceGetVideoPopularResult()
}

func searchVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceSearchVideoArgs)
	realResult := result.(*video.VideoServiceSearchVideoResult)
	success, err := handler.(video.VideoService).SearchVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceSearchVideoArgs() interface{} {
	return video.NewVideoServiceSearchVideoArgs()
}

func newVideoServiceSearchVideoResult() interface{} {
	return video.NewVideoServiceSearchVideoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) VideoFeed(ctx context.Context, req *video.VideoFeedReq) (VideoService_VideoFeedClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "VideoFeed", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &videoServiceVideoFeedClient{res.Stream}

	if err := stream.Stream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := stream.Stream.Close(); err != nil {
		return nil, err
	}
	return stream, nil
}

func (p *kClient) PublishVideo(ctx context.Context, req *video.PublishVideoReq) (r *video.PublishVideoResp, err error) {
	var _args video.VideoServicePublishVideoArgs
	_args.Req = req
	var _result video.VideoServicePublishVideoResult
	if err = p.c.Call(ctx, "PublishVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoList(ctx context.Context, req *video.GetVideoListReq) (r *video.GetVideoListResp, err error) {
	var _args video.VideoServiceGetVideoListArgs
	_args.Req = req
	var _result video.VideoServiceGetVideoListResult
	if err = p.c.Call(ctx, "GetVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoPopular(ctx context.Context, req *video.GetVideoPopularReq) (r *video.GetVideoPopularResp, err error) {
	var _args video.VideoServiceGetVideoPopularArgs
	_args.Req = req
	var _result video.VideoServiceGetVideoPopularResult
	if err = p.c.Call(ctx, "GetVideoPopular", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchVideo(ctx context.Context, req *video.SearchVideoReq) (r *video.SearchVideoResp, err error) {
	var _args video.VideoServiceSearchVideoArgs
	_args.Req = req
	var _result video.VideoServiceSearchVideoResult
	if err = p.c.Call(ctx, "SearchVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
